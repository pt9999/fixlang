module Main;

// A trait for collection-like types.
trait c : Collects {
    // Associated type definition.
    // Here, we define a type level function `Elem` which domain is the trait `Collects` and returns a type.
    // When implementing `Collects` trait for a type `c`, you need to specify the value (which is a type) `Elem c`.
    type Elem c;
    // You can use `Elem c` in trait method definitions.
    empty : Elem c;
    insert : Elem c -> c -> c;
    to_iter : c -> Iterator (Elem c);
}

// Implementing `Collects` for arrays.
impl Array a : Collects {
    type Elem (Array a) = a;
    empty = [];
    insert = |x, xs| xs.push_back(x);
    to_iter = |xs| Array::to_iter(xs);
}

// Implementing `Collects` for iterators.
impl Iterator a : Collects {
    type Elem (Iterator a) = a;
    empty = Iterator::empty;
    insert = |x, xs| xs.push_front(x);
    to_iter = |xs| xs;
}

// Takes two collections with the same element type, and insert all elements of the second collection to the first one.
extend : [c1 : Collects, c2 : Collects, Elem c1 = e, Elem c2 = e] c1 -> c2 -> c2;
extend = |xs, ys| xs.to_iter.fold(ys, |ys, x| ys.insert(x));

// Take a collection whose element type implements `ToString` trait, and stringify the collection.
stringify : [c : Collects, Elem c = e, e : ToString] c -> String;
stringify = |xs| xs.to_iter.map(to_string).join(", ");

main : IO ();
main = (
    assert_eq(|_|"", [1, 2, 3].extend([4, 5, 6]).stringify, "1, 2, 3, 4, 5, 6");;
    pure()
);
module Main;

is_prime : I64 -> Array Bool;
is_prime = |n| (
    let arr = Array::fill(n, true);
    let arr = arr.set(0, false);
    let arr = arr.set(1, false);
    (2, arr, n).fix(|continue, (i, arr, n)|
        if i*i > n { arr };
        let next_arr = (
            if !arr.@(i) { arr };
            (i+i, arr, n, i).fix(|continue, (q, arr, n, i)|
                if n-1 < q { arr };
                continue $ (q+i, arr.set(q, false), n, i)
            )
        );
        continue $ (i+1, next_arr, n)
    )
);

// Count the appearance of a value in an array.
count : [a: Eq] a -> Array a -> I64;
count = |elem, arr| (
    (0, 0, arr, elem).fix(|continue, (i, sum, arr, elem)|
        if arr.get_size == i { sum };
        let sum = sum + (if arr.@(i) == elem {1} else {0});
        continue $ (i+1, sum, arr, elem)
    )
);

main : IO ();
main = println $ is_prime(10000000).count(true).to_string; // 664579

module Main;

import Random;

// Creates a prime table up to n.
prime_table : I64 -> Array Bool;
prime_table = |n| (
    let arr = Array::fill(n, true);
    let arr = arr.set(0, false);
    let arr = arr.set(1, false);
    loop((2, arr), |(i, arr)|
        if i*i > n { break $ arr };
        let next_arr = (
            if !arr.@(i) { arr };
            loop((i+i, arr), |(q, arr)|
                if n-1 < q { break $ arr };
                continue $ (q+i, arr.set(q, false))
            )
        );
        continue $ (i+1, next_arr)
    )
);

// Count the appearance of a value in an array.
count_element : [a: Eq] a -> Array a -> I64;
count_element = |elem, arr| (
    loop((0, 0), |(i, sum)|
        if arr.get_size == i { break $ sum };
        let sum = sum + (if arr.@(i) == elem {1} else {0});
        continue $ (i+1, sum)
    )
);

main : IO ();
main = (
    assert_eq(|_|"count-primes", 1000000.prime_table.count_element(true), 78498);;
    pure()
);